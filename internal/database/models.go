// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package database

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AlbumReleaseDatePrecision string

const (
	AlbumReleaseDatePrecisionYear  AlbumReleaseDatePrecision = "year"
	AlbumReleaseDatePrecisionMonth AlbumReleaseDatePrecision = "month"
	AlbumReleaseDatePrecisionDay   AlbumReleaseDatePrecision = "day"
)

func (e *AlbumReleaseDatePrecision) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AlbumReleaseDatePrecision(s)
	case string:
		*e = AlbumReleaseDatePrecision(s)
	default:
		return fmt.Errorf("unsupported scan type for AlbumReleaseDatePrecision: %T", src)
	}
	return nil
}

type NullAlbumReleaseDatePrecision struct {
	AlbumReleaseDatePrecision AlbumReleaseDatePrecision `json:"album_release_date_precision"`
	Valid                     bool                      `json:"valid"` // Valid is true if AlbumReleaseDatePrecision is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAlbumReleaseDatePrecision) Scan(value interface{}) error {
	if value == nil {
		ns.AlbumReleaseDatePrecision, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AlbumReleaseDatePrecision.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAlbumReleaseDatePrecision) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AlbumReleaseDatePrecision), nil
}

type AlbumType string

const (
	AlbumTypeAlbum       AlbumType = "album"
	AlbumTypeSingle      AlbumType = "single"
	AlbumTypeCompilation AlbumType = "compilation"
)

func (e *AlbumType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AlbumType(s)
	case string:
		*e = AlbumType(s)
	default:
		return fmt.Errorf("unsupported scan type for AlbumType: %T", src)
	}
	return nil
}

type NullAlbumType struct {
	AlbumType AlbumType `json:"album_type"`
	Valid     bool      `json:"valid"` // Valid is true if AlbumType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAlbumType) Scan(value interface{}) error {
	if value == nil {
		ns.AlbumType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AlbumType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAlbumType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AlbumType), nil
}

type Album struct {
	ID                   string                    `json:"id"`
	AlbumType            AlbumType                 `json:"album_type"`
	TotalTracks          int64                     `json:"total_tracks"`
	ExternalUrls         map[string]string         `json:"external_urls"`
	Href                 string                    `json:"href"`
	Name                 string                    `json:"name"`
	ReleaseDate          string                    `json:"release_date"`
	ReleaseDatePrecision AlbumReleaseDatePrecision `json:"release_date_precision"`
	Uri                  string                    `json:"uri"`
	Genres               []string                  `json:"genres"`
}

func (e *Album) GetID() string {
	return e.ID
}

func (e *Album) GetAlbumType() AlbumType {
	return e.AlbumType
}

func (e *Album) GetTotalTracks() int64 {
	return e.TotalTracks
}

func (e *Album) GetExternalUrls() map[string]string {
	return e.ExternalUrls
}

func (e *Album) GetHref() string {
	return e.Href
}

func (e *Album) GetName() string {
	return e.Name
}

func (e *Album) GetReleaseDate() string {
	return e.ReleaseDate
}

func (e *Album) GetReleaseDatePrecision() AlbumReleaseDatePrecision {
	return e.ReleaseDatePrecision
}

func (e *Album) GetUri() string {
	return e.Uri
}

func (e *Album) GetGenres() []string {
	return e.Genres
}

type AlbumImage struct {
	AlbumID  string `json:"album_id"`
	ImageUrl string `json:"image_url"`
}

func (e *AlbumImage) GetAlbumID() string {
	return e.AlbumID
}

func (e *AlbumImage) GetImageUrl() string {
	return e.ImageUrl
}

type Artist struct {
	ID           string            `json:"id"`
	ExternalUrls map[string]string `json:"external_urls"`
	Href         string            `json:"href"`
	Name         string            `json:"name"`
	Uri          string            `json:"uri"`
	Genres       []string          `json:"genres"`
}

func (e *Artist) GetID() string {
	return e.ID
}

func (e *Artist) GetExternalUrls() map[string]string {
	return e.ExternalUrls
}

func (e *Artist) GetHref() string {
	return e.Href
}

func (e *Artist) GetName() string {
	return e.Name
}

func (e *Artist) GetUri() string {
	return e.Uri
}

func (e *Artist) GetGenres() []string {
	return e.Genres
}

type ArtistAlbum struct {
	ArtistID string `json:"artist_id"`
	AlbumID  string `json:"album_id"`
}

func (e *ArtistAlbum) GetArtistID() string {
	return e.ArtistID
}

func (e *ArtistAlbum) GetAlbumID() string {
	return e.AlbumID
}

type ArtistImage struct {
	ArtistID string `json:"artist_id"`
	ImageUrl string `json:"image_url"`
}

func (e *ArtistImage) GetArtistID() string {
	return e.ArtistID
}

func (e *ArtistImage) GetImageUrl() string {
	return e.ImageUrl
}

type ArtistTrack struct {
	ArtistID string `json:"artist_id"`
	TrackID  string `json:"track_id"`
}

func (e *ArtistTrack) GetArtistID() string {
	return e.ArtistID
}

func (e *ArtistTrack) GetTrackID() string {
	return e.TrackID
}

type Image struct {
	Url    string `json:"url"`
	Width  int64  `json:"width"`
	Height int64  `json:"height"`
}

func (e *Image) GetUrl() string {
	return e.Url
}

func (e *Image) GetWidth() int64 {
	return e.Width
}

func (e *Image) GetHeight() int64 {
	return e.Height
}

type Playlist struct {
	ID           string            `json:"id"`
	ExternalUrls map[string]string `json:"external_urls"`
	Href         string            `json:"href"`
	Name         string            `json:"name"`
	Uri          string            `json:"uri"`
}

func (e *Playlist) GetID() string {
	return e.ID
}

func (e *Playlist) GetExternalUrls() map[string]string {
	return e.ExternalUrls
}

func (e *Playlist) GetHref() string {
	return e.Href
}

func (e *Playlist) GetName() string {
	return e.Name
}

func (e *Playlist) GetUri() string {
	return e.Uri
}

type PlaylistImage struct {
	PlaylistID string `json:"playlist_id"`
	ImageUrl   string `json:"image_url"`
}

func (e *PlaylistImage) GetPlaylistID() string {
	return e.PlaylistID
}

func (e *PlaylistImage) GetImageUrl() string {
	return e.ImageUrl
}

type Token struct {
	ID           int32            `json:"id"`
	AccessToken  string           `json:"access_token"`
	TokenType    string           `json:"token_type"`
	RefreshToken string           `json:"refresh_token"`
	Expiry       pgtype.Timestamp `json:"expiry"`
}

func (e *Token) GetID() int32 {
	return e.ID
}

func (e *Token) GetAccessToken() string {
	return e.AccessToken
}

func (e *Token) GetTokenType() string {
	return e.TokenType
}

func (e *Token) GetRefreshToken() string {
	return e.RefreshToken
}

func (e *Token) GetExpiry() pgtype.Timestamp {
	return e.Expiry
}

type Track struct {
	ID           string            `json:"id"`
	DurationMs   int64             `json:"duration_ms"`
	Explicit     bool              `json:"explicit"`
	ExternalUrls map[string]string `json:"external_urls"`
	Href         string            `json:"href"`
	Name         string            `json:"name"`
	Popularity   int64             `json:"popularity"`
	PreviewUrl   *string           `json:"preview_url"`
	TrackNumber  int64             `json:"track_number"`
	Uri          string            `json:"uri"`
	AlbumID      string            `json:"album_id"`
}

func (e *Track) GetID() string {
	return e.ID
}

func (e *Track) GetDurationMs() int64 {
	return e.DurationMs
}

func (e *Track) GetExplicit() bool {
	return e.Explicit
}

func (e *Track) GetExternalUrls() map[string]string {
	return e.ExternalUrls
}

func (e *Track) GetHref() string {
	return e.Href
}

func (e *Track) GetName() string {
	return e.Name
}

func (e *Track) GetPopularity() int64 {
	return e.Popularity
}

func (e *Track) GetPreviewUrl() *string {
	return e.PreviewUrl
}

func (e *Track) GetTrackNumber() int64 {
	return e.TrackNumber
}

func (e *Track) GetUri() string {
	return e.Uri
}

func (e *Track) GetAlbumID() string {
	return e.AlbumID
}
